import streamlit as st
import base64
import time
import os
from utils.voice import speak
from utils.sidebar import render_sidebar

render_sidebar()

# ЁЯФБ Reset state if user navigated manually
if st.session_state.get("last_clicked_page") != "explore_insurance":
    for key in ["play_and_redirect", "start_time", "speech_text", 
                "selected_insurance_type", "selected_scheme_name", 
                "last_clicked_label", "button_click_count"]:
        if key in st.session_state:
            del st.session_state[key]

st.session_state["last_clicked_page"] = "explore_insurance"
lang_code = st.session_state.get("language", "en")

# ЁЯМН Headings in local language
heading_texts = {
    "en": "Select Type of Insurance",
    "hi": "рдмреАрдорд╛ рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ",
    "mr": "рд╡рд┐рдорд╛ рдкреНрд░рдХрд╛рд░ рдирд┐рд╡рдбрд╛",
    "ta": "роХро╛рокрпНрокрпАроЯрпНроЯрпБ ро╡роХрпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
    "te": "р░мр▒Ар░ор░╛ р░░р░Хр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
    "gu": "рк╡рлАркорк╛ рккрлНрк░ркХрк╛рк░ рккрк╕ркВркж ркХрк░рлЛ",
    "bn": "ржмрзАржорж╛рж░ ржзрж░ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи"
}
heading = heading_texts.get(lang_code, heading_texts["en"])
st.title(f"ЁЯЫбя╕П {heading}")

# ЁЯФК Speak heading once
if not st.session_state.get("heading_spoken", False):
    audio_file = speak(heading, lang_code, filename="heading.mp3")
    if audio_file and os.path.exists(audio_file):
        with open(audio_file, "rb") as f:
            b64 = base64.b64encode(f.read()).decode()
        st.markdown(f"""
            <audio autoplay>
                <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
            </audio>
        """, unsafe_allow_html=True)
    st.session_state.heading_spoken = True

# ЁЯФа Insurance translations
INSURANCE_TRANSLATIONS = {
    "en": {
        "Health Insurance": "Health Insurance",
        "Life Insurance": "Life Insurance",
        "Crop Insurance": "Crop Insurance",
        "Livestock Insurance": "Livestock Insurance",
        "Vehicle Insurance": "Vehicle Insurance",
        "Disability Insurance": "Disability Insurance",
        "Travel Insurance": "Travel Insurance",
        "Home Insurance": "Home Insurance"
    },
    "hi": {
        "Health Insurance": "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмреАрдорд╛",
        "Life Insurance": "рдЬреАрд╡рди рдмреАрдорд╛",
        "Crop Insurance": "рдлрд╕рд▓ рдмреАрдорд╛",
        "Livestock Insurance": "рдкрд╢реБрдзрди рдмреАрдорд╛",
        "Vehicle Insurance": "рд╡рд╛рд╣рди рдмреАрдорд╛",
        "Disability Insurance": "рд╡рд┐рдХрд▓рд╛рдВрдЧрддрд╛ рдмреАрдорд╛",
        "Travel Insurance": "рдпрд╛рддреНрд░рд╛ рдмреАрдорд╛",
        "Home Insurance": "рдЧреГрд╣ рдмреАрдорд╛"
    },
    "mr": {
        "Health Insurance": "рдЖрд░реЛрдЧреНрдп рд╡рд┐рдорд╛",
        "Life Insurance": "рдЬреАрд╡рди рд╡рд┐рдорд╛",
        "Crop Insurance": "рдкрд┐рдХ рд╡рд┐рдорд╛",
        "Livestock Insurance": "рдкрд╢реБрдзрди рд╡рд┐рдорд╛",
        "Vehicle Insurance": "рд╡рд╛рд╣рди рд╡рд┐рдорд╛",
        "Disability Insurance": "рдЕрдкрдВрдЧрддреНрд╡ рд╡рд┐рдорд╛",
        "Travel Insurance": "рдкреНрд░рд╡рд╛рд╕ рд╡рд┐рдорд╛",
        "Home Insurance": "рдЧреГрд╣ рд╡рд┐рдорд╛"
    },
    "ta": {
        "Health Insurance": "роЪрпБроХро╛родро╛ро░ роХро╛рокрпНрокрпАроЯрпБ",
        "Life Insurance": "ро╡ро╛ро┤рпНроХрпНроХрпИ роХро╛рокрпНрокрпАроЯрпБ",
        "Crop Insurance": "рокропро┐ро░рпН роХро╛рокрпНрокрпАроЯрпБ",
        "Livestock Insurance": "рооро╛роЯрпБроХро│рпН роХро╛рокрпНрокрпАроЯрпБ",
        "Vehicle Insurance": "ро╡ро╛роХрой роХро╛рокрпНрокрпАроЯрпБ",
        "Disability Insurance": "роКройроорпБро▒рпНро▒рпЛро░рпН роХро╛рокрпНрокрпАроЯрпБ",
        "Travel Insurance": "рокропрог роХро╛рокрпНрокрпАроЯрпБ",
        "Home Insurance": "ро╡рпАроЯрпНроЯрпБ роХро╛рокрпНрокрпАроЯрпБ"
    },
    "te": {
        "Health Insurance": "р░Жр░░р▒Лр░Чр▒Нр░п р░мр▒Ар░ор░╛",
        "Life Insurance": "р░Ьр▒Ар░╡р░и р░мр▒Ар░ор░╛",
        "Crop Insurance": "р░кр░Вр░Я р░мр▒Ар░ор░╛",
        "Livestock Insurance": "р░кр░╢р▒Бр░╕р░Вр░╡р░░р▒Нр░зр░Х р░мр▒Ар░ор░╛",
        "Vehicle Insurance": "р░╡р░╛р░╣р░и р░мр▒Ар░ор░╛",
        "Disability Insurance": "р░╡р░┐р░Хр░▓р░╛р░Вр░Чр▒Бр░▓ р░мр▒Ар░ор░╛",
        "Travel Insurance": "р░кр▒Нр░░р░пр░╛р░г р░мр▒Ар░ор░╛",
        "Home Insurance": "р░Чр▒Гр░╣ р░мр▒Ар░ор░╛"
    },
    "gu": {
        "Health Insurance": "ркЖрк░рлЛркЧрлНркп рк╡рлАркорк╛",
        "Life Insurance": "ркЬрлАрк╡рки рк╡рлАркорк╛",
        "Crop Insurance": "рккрк╛ркХ рк╡рлАркорк╛",
        "Livestock Insurance": "рккрк╢рлБрккрк╛рк▓рки рк╡рлАркорк╛",
        "Vehicle Insurance": "рк╡рк╛рк╣рки рк╡рлАркорк╛",
        "Disability Insurance": "ркЕрккркВркЧркдрк╛ рк╡рлАркорк╛",
        "Travel Insurance": "ркорлБрк╕рк╛рклрк░рлА рк╡рлАркорк╛",
        "Home Insurance": "ркШрк░ рк╡рлАркорк╛"
    },
    "bn": {
        "Health Insurance": "рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрзАржорж╛",
        "Life Insurance": "ржЬрзАржмржи ржмрзАржорж╛",
        "Crop Insurance": "рж╢рж╕рзНржп ржмрзАржорж╛",
        "Livestock Insurance": "ржкрж╢рзБржкрж╛рж▓ржи ржмрзАржорж╛",
        "Vehicle Insurance": "ржпрж╛ржиржмрж╛рж╣ржи ржмрзАржорж╛",
        "Disability Insurance": "ржкрзНрж░рждрж┐ржмржирзНржзрзА ржмрзАржорж╛",
        "Travel Insurance": "ржнрзНрж░ржоржг ржмрзАржорж╛",
        "Home Insurance": "ржмрж╛ржбрж╝рж┐рж░ ржмрзАржорж╛"
    }
}

insurance_options = {
    "Health Insurance": "Ayushman Bharat - PMJAY",
    "Life Insurance": "Pradhan Mantri Jeevan Jyoti Bima Yojana",
    "Crop Insurance": "Pradhan Mantri Fasal Bima Yojana",
    "Livestock Insurance": "Livestock Insurance Scheme",
    "Vehicle Insurance": "Pradhan Mantri Suraksha Bima Yojana",
    "Disability Insurance": "National Disability Insurance Scheme",
    "Travel Insurance": "Bharat Gaurav Scheme",
    "Home Insurance": "Griha Aadhar Yojana"
}

# ЁЯза Init click tracking
st.session_state.setdefault("last_clicked_label", None)
st.session_state.setdefault("button_click_count", 0)

# ЁЯЯв Render insurance options
translations = INSURANCE_TRANSLATIONS.get(lang_code, INSURANCE_TRANSLATIONS["en"])
for ins_type, scheme in insurance_options.items():
    label = translations.get(ins_type, ins_type)
    if st.button(label):
        if st.session_state.last_clicked_label == label:
            st.session_state.button_click_count += 1
        else:
            st.session_state.last_clicked_label = label
            st.session_state.button_click_count = 1
            st.session_state.speech_text = label
            st.session_state.start_time = time.time()

        # 1st click: Speak only
        if st.session_state.button_click_count == 1:
            audio_file = speak(label, lang_code, filename="ins_choice.mp3")
            if audio_file and os.path.exists(audio_file):
                with open(audio_file, "rb") as f:
                    b64 = base64.b64encode(f.read()).decode()
                st.markdown(f"""
                    <audio autoplay>
                        <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
                    </audio>
                """, unsafe_allow_html=True)

        # 2nd click: Redirect
        elif st.session_state.button_click_count == 2:
            st.session_state.selected_insurance_type = ins_type
            st.session_state.selected_scheme_name = scheme
            st.session_state.button_click_count = 0
            st.switch_page("pages/4b_insurance_summary.py")
